apiVersion: apps/v1
kind: Deployment
metadata:
  name: qtask-broker-deployment # Nombre del Deployment
  labels:
    app: qtask-broker           # Etiqueta para identificar los recursos
spec:
  replicas: 1                  # Número de Pods a ejecutar (según solicitado)
  selector:
    matchLabels:
      app: qtask-broker         # Selecciona Pods con esta etiqueta
  template:
    metadata:
      labels:
        app: qtask-broker       # Etiqueta que se aplicará a los Pods
    spec:
      containers:
      - name: qtask-broker-container # Nombre del contenedor dentro del Pod
        image: cloudcitycolombia/qtask-broker:latest # Imagen a usar (privada)
        ports:
        - containerPort: 3000     # Puerto que expone el contenedor (de la variable PORT)
        env:
        # Variables de entorno para la aplicación (según solicitado)
        - name: PORT
          value: "3000"
        - name: REDIS_HOST
          value: "40.76.248.127"
        - name: REDIS_PORT
          value: "30000"
        - name: REDIS_USERNAME
          value: "default"
        - name: REDIS_PASSWORD
          value: "3n7F8fqEFfzC2vfCaeztlXNKxtcIJjxX2Mht+GadPmyGdXbrI36CHw=="
        - name: NUM_PARTITIONS
          value: "1"
         resources:
           requests:
             memory: "64Mi"
             cpu: "100m" # 0.1 CPU cores
           limits:
             memory: "128Mi"
             cpu: "500m" # 0.5 CPU cores
      imagePullSecrets:
      - name: dockerhub-secret      # Nombre del secreto para jalar la imagen privada

---

apiVersion: v1
kind: Service
metadata:
  name: qtask-broker-service    # Nombre del Service
  labels:
    app: qtask-broker           # Etiqueta (opcional pero útil)
spec:
  type: NodePort                # Tipo de servicio: NodePort (según solicitado)
  selector:
    app: qtask-broker           # Selecciona los Pods con esta etiqueta para dirigir el tráfico
  ports:
  - name: http                  # Nombre descriptivo para el puerto
    protocol: TCP
    port: 3000                  # Puerto expuesto por el Service DENTRO del cluster
    targetPort: 3000            # Puerto al que apunta en los Pods (containerPort)
    nodePort: 30001             # Puerto estático expuesto en CADA nodo del cluster (según solicitado) 